#!/usr/bin/env ruby
require 'rubygems'
require 'optparse'
require 'pathname'

$where  = '.'
$server = nil

optparse = OptionParser.new do |o|
  o.banner = "Usage: #{$0} [OPTIONS] gem [gem...]"
  o.separator <<EOT

Download and save a gem file to disk, including saving any missing dependencies
at the same time.  This does not attempt to deduplicate dependencies, and will
simply prefer the latest version where possible.

OPTIONS:
EOT

  o.on('--dir DIR', '-d DIR', 'the directory to save gem files to') do |dir|
    $where = dir
  end

  o.on('--server URL', '--gem-server URL', '-s URL', 'the remote gem source to use') do |url|
    $server = url
  end

  o.on('--gemfile FILE', '-f FILE', 'a file with the list of gems to mirror') do |file|
    $gemfile = file
  end
end

optparse.parse!

# Upgrade this!  We actually want the gems in a `gems` directory under the
# target, so we can build the mirror metatdata correctly in the location.
$where = Pathname($where) + 'gems'
$where.mkpath


# Mirror an individual gem, recursively mirroring any dependencies.
def mirror_gem(destination, name, version = nil)
  dep = Gem::Dependency.new(name, version)
  all = Gem::Requirement.default != version

  # Use the Ruby 2.0 RubyGems API if it's available
  if Gem::SpecFetcher.fetcher.respond_to? :spec_for_dependency
    specs_and_sources, errors =
      Gem::SpecFetcher.fetcher.spec_for_dependency(dep, true)
  else # Default to the 1.x API
    specs_and_sources, errors =
      Gem::SpecFetcher.fetcher.fetch_with_errors(dep, all, true, false)
  end

  if platform = Gem.platforms.last
    filtered = specs_and_sources.select { |s,| s.platform == platform }
    specs_and_sources = filtered unless filtered.empty?
  end

  spec, source_uri = specs_and_sources.sort_by { |s,| s.version }.last
  if spec.nil? then
    puts "Unable to find #{name}!"
    exit 1
  end

  # If we're using the Ruby 2.0 RubyGems API, call the Gem::Source's
  # #uri method to get a URI object
  if source_uri.respond_to? :uri
    source = source_uri.uri
  # If we're using the Ruby 1.9 RubyGems API, which returns a string for
  # the source URI, convert it to a URI object
  else
    source = URI.parse(source_uri)
  end

  file   = "#{spec.full_name}.gem"
  output = "#{destination}/#{file}"
  unless File.exists? output
    remote_path = source + "gems/#{file}"
    gem = Gem::RemoteFetcher.fetcher.fetch_path remote_path.to_s
    File.open output, "wb" do |f| f.write gem end

    puts "Saved #{spec.full_name} to #{output}"
  end

  # Now, check the dependencies of that gem, no?
  spec.dependencies.select {|x| x.type == :runtime }.each do |dep|
    mirror_gem(destination, dep.name, dep.requirement)
  end
end

puts "Mirroring gems from #{$server || 'RubyGems'}"
$server and Gem.sources = [$server]

# We actually want the gems one level down, in their repository structure.
# REVISIT: Should we support gem version information here?  (eg: ~> 2.7)
if $gemfile then
  File.read($gemfile).each_line do |line|
    gem, version = line.chomp.split(/\s+/, 2)
    gem or next                 # skip empty lines, just in case
    gem =~ /^\s*#/ and next     # also comments
    mirror_gem($where, gem, version)
  end
else
  ARGV.each {|gem| mirror_gem($where, gem) }
end

puts "Generating the GEM mirror indexes..."
system('gem', 'generate_index', '-d', $where.parent.to_s)
$?.success? or fail "Failed to build the gem index: #{$?}"

exit true
